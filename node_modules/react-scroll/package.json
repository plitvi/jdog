{
  "_args": [
    [
      {
        "raw": "react-scroll",
        "scope": null,
        "escapedName": "react-scroll",
        "name": "react-scroll",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/cashalot/self/jdog"
    ]
  ],
  "_from": "react-scroll@latest",
  "_id": "react-scroll@1.5.2",
  "_inCache": true,
  "_location": "/react-scroll",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-scroll-1.5.2.tgz_1492504566818_0.3755722411442548"
  },
  "_npmUser": {
    "name": "fisshy",
    "email": "joachim@causam.se"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-scroll",
    "scope": null,
    "escapedName": "react-scroll",
    "name": "react-scroll",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-scroll/-/react-scroll-1.5.2.tgz",
  "_shasum": "f10f14840d3138a121d2c0f04933bbfee4193975",
  "_shrinkwrap": null,
  "_spec": "react-scroll",
  "_where": "/home/cashalot/self/jdog",
  "authors": [
    "Joachim Karlsson"
  ],
  "babel": {
    "presets": [
      "es2015",
      "react"
    ]
  },
  "bugs": {
    "url": "https://github.com/fisshy/react-scroll/issues"
  },
  "dependencies": {
    "object-assign": "^4.1.1",
    "prop-types": "^15.5.8"
  },
  "description": "A scroll component for React.js",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-core": "^6.24.1",
    "babel-loader": "^6.4.1",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.24.1",
    "expect": "^1.20.2",
    "gulp": "^3.9.1",
    "gulp-concat": "^2.6.1",
    "karma": "^1.6.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-mocha": "^1.3.0",
    "karma-mocha-reporter": "^2.2.3",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^2.0.3",
    "mocha": "^3.2.0",
    "react": "^15.5.4",
    "react-addons-test-utils": "^15.5.1",
    "react-dom": "^15.5.4",
    "webpack": "^2.4.1",
    "webpack-dev-server": "^2.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "f10f14840d3138a121d2c0f04933bbfee4193975",
    "tarball": "https://registry.npmjs.org/react-scroll/-/react-scroll-1.5.2.tgz"
  },
  "homepage": "https://github.com/fisshy/react-scroll",
  "keywords": [
    "react",
    "react-component",
    "scroll",
    "scroller",
    "scrolls"
  ],
  "license": "MIT",
  "main": "modules",
  "maintainers": [
    {
      "name": "fisshy",
      "email": "Jockkee_@hotmail.com"
    }
  ],
  "name": "react-scroll",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.5.4",
    "react-dom": "^15.5.4"
  },
  "readme": "## React Scroll\r\n\r\nDirective for basic scrolling and smooth scrolling.\r\n\r\n### Install\r\n```js\r\n$ npm install react-scroll\r\n```\r\n\r\n### Run\r\n```js\r\n$ npm install\r\n$ npm test\r\n$ npm run examples\r\n```\r\n\r\n### Examples\r\nCheckout examples\r\n> Basic\r\n>> [Live](http://fisshy.github.io/react-scroll-example/basic/index.html)\r\n>> Or\r\n>> [Code](https://github.com/fisshy/react-scroll/blob/master/examples/basic/app.js)\r\n\r\n### Usage\r\n```js\r\n\r\nvar React   = require('react');\r\nvar Scroll  = require('react-scroll');\r\n\r\nvar Link       = Scroll.Link;\r\nvar Element    = Scroll.Element;\r\nvar Events     = Scroll.Events;\r\nvar scroll     = Scroll.animateScroll;\r\nvar scrollSpy  = Scroll.scrollSpy;\r\n\r\n\r\nvar Section = React.createClass({\r\n  componentDidMount: function() {\r\n\r\n    Events.scrollEvent.register('begin', function(to, element) {\r\n      console.log(\"begin\", arguments);\r\n    });\r\n\r\n    Events.scrollEvent.register('end', function(to, element) {\r\n      console.log(\"end\", arguments);\r\n    });\r\n\r\n    scrollSpy.update();\r\n\r\n  },\r\n  componentWillUnmount: function() {\r\n    Events.scrollEvent.remove('begin');\r\n    Events.scrollEvent.remove('end');\r\n  },\r\n  scrollToTop: function() {\r\n    scroll.scrollToTop();\r\n  },\r\n  scrollToBottom: function() {\r\n    scroll.scrollToBottom();\r\n  },\r\n  scrollTo: function() {\r\n    scroll.scrollTo(100);\r\n  },\r\n  scrollMore: function() {\r\n    scroll.scrollMore(100);\r\n  },\r\n  handleSetActive: function(to) {\r\n    console.log(to);\r\n  },\r\n  render: function () {\r\n  \treturn (\r\n      <div>\r\n        <Link activeClass=\"active\" to=\"test1\" spy={true} smooth={true} offset={50} duration={500} onSetActive={this.handleSetActive}>\r\n          Test 1\r\n        </Link>\r\n        <Link activeClass=\"active\" to=\"test1\" spy={true} smooth={true} offset={50} duration={500} delay={1000}>\r\n          Test 2 (delay)\r\n        </Link>\r\n        <Link className=\"test6\" to=\"anchor\" spy={true} smooth={true} duration={500}>\r\n          Test 6 (anchor)\r\n        </Link>\r\n        <Button activeClass=\"active\" className=\"btn\" type=\"submit\" value=\"Test 2\" to=\"test2\" spy={true} smooth={true} offset={50} duration={500} >\r\n          Test 2\r\n        </Button>\r\n\r\n        <Element name=\"test1\" className=\"element\">\r\n          test 1\r\n        </Element>\r\n\r\n        <Element name=\"test2\" className=\"element\">\r\n          test 2\r\n        </Element>\r\n\r\n        <div id=\"anchor\" className=\"element\">\r\n          test 6 (anchor)\r\n        </div>\r\n\r\n\r\n        <Link to=\"firstInsideContainer\" containerId=\"containerElement\">\r\n          Go to first element inside container\r\n        </Link>\r\n\r\n        <Link to=\"secondInsideContainer\" containerId=\"containerElement\">\r\n          Go to second element inside container\r\n        </Link>\r\n        <div className=\"element\" id=\"containerElement\">\r\n          <Element name=\"firstInsideContainer\">\r\n            first element inside container\r\n          </Element>\r\n\r\n          <Element name=\"secondInsideContainer\">\r\n            second element inside container\r\n          </Element>\r\n        </div>\r\n\r\n        <a onClick={this.scrollToTop}>To the top!</a>\r\n        <br/>\r\n        <a onClick={this.scrollToBottom}>To the bottom!</a>\r\n        <br/>\r\n        <a onClick={this.scrollTo}>Scroll to 100px from the top</a>\r\n        <br/>\r\n        <a onClick={this.scrollMore}>Scroll 100px more from the current position!</a>\r\n      </div>\r\n\t);\r\n  }\r\n});\r\n\r\nReact.render(\r\n  <Section />,\r\n  document.getElementById('example')\r\n);\r\n\r\n```\r\n\r\n### Props/Options\r\n\r\n> activeClass - class applied when element is reached\r\n\r\n> to - target to scroll to\r\n\r\n> containerId - container to listen for scroll events and to perform scrolling in\r\n\r\n> spy - make Link selected when scroll is at its targets position\r\n\r\n> smooth - animate the scrolling\r\n\r\n> offset - scroll additional px ( like padding )\r\n\r\n> duration - time of the scroll animation\r\n\r\n> delay - wait x milliseconds before scroll\r\n\r\n> isDynamic - in case the distance has to be recalculated - if you have content that expands etc.\r\n\r\n> onSetActive - invoke whenever link is being set to active\r\n\r\n> onSetInactive - invoke whenever link is lose the active status\r\n\r\n> ignoreCancelEvents - ignores events which cancel animated scrolling\r\n\r\n```js\r\n<Link activeClass=\"active\"\r\n      to=\"target\"\r\n      spy={true}\r\n      smooth={true}\r\n      offset={50}\r\n      duration={500}\r\n      delay={1000}\r\n      isDynamic={true}\r\n      onSetActive={this.handleSetActive}\r\n      onSetInactive={this.handleSetInactive}\r\n      ignoreCancelEvents={false}\r\n>\r\n  Your name\r\n</Link>\r\n```\r\n\r\n### Scroll Methods\r\n\r\n> Scroll To Top\r\n\r\n```js\r\n\r\nvar Scroll = require('react-scroll');\r\nvar scroll = Scroll.animateScroll;\r\n\r\nscroll.scrollToTop(options);\r\n\r\n```\r\n\r\n> Scroll To Bottom\r\n\r\n```js\r\n\r\nvar Scroll = require('react-scroll');\r\nvar scroll = Scroll.animateScroll;\r\n\r\nscroll.scrollToBottom(options);\r\n\r\n```\r\n\r\n> Scroll To (position)\r\n\r\n```js\r\n\r\nvar Scroll = require('react-scroll');\r\nvar scroll = Scroll.animateScroll;\r\n\r\nscroll.scrollTo(100, options);\r\n\r\n```\r\n\r\n> Scroll To (Element)\r\n\r\nanimateScroll.scrollTo(positionInPixels, props = {});\r\n\r\n```js\r\n\r\nvar Scroll = require('react-scroll');\r\nvar Element = Scroll.Element;\r\nvar scroller = Scroll.scroller;\r\n\r\n<Element name=\"myScrollToElement\"></Element>\r\n\r\n// Somewhere else, even another file\r\nscroller.scrollTo('myScrollToElement', {\r\n  duration: 1500,\r\n  delay: 100,\r\n  smooth: true,\r\n  containerId: 'ContainerElementID',\r\n  ...\r\n})\r\n\r\n```\r\n\r\n> Scroll More (px)\r\n\r\n```js\r\n\r\nvar Scroll = require('react-scroll');\r\nvar scroll = Scroll.animateScroll;\r\n\r\nscroll.scrollMore(10, options);\r\n\r\n```\r\n\r\n### Scroll events\r\n\r\n> begin - start of the scrolling\r\n\r\n```js\r\n\r\nvar Scroll = require('react-scroll');\r\nvar Events = Scroll.Events;\r\n\r\nEvents.scrollEvent.register('begin', function(to, element) {\r\n  console.log(\"begin\", to, element);\r\n});\r\n\r\n```\r\n\r\n> end - end of the scrolling/animation\r\n\r\n```js\r\n\r\nEvents.scrollEvent.register('end', function(to, element) {\r\n  console.log(\"end\", to, element);\r\n});\r\n\r\n```\r\n\r\n\r\n> Remove events\r\n\r\n```js\r\n\r\nEvents.scrollEvent.remove('begin');\r\nEvents.scrollEvent.remove('end');\r\n\r\n```\r\n\r\n\r\n#### Create your own Link/Element\r\n> Simply just pass your component to one of the high order components (Element/Scroll)\r\n\r\n```js\r\nvar React   = require('react');\r\nvar Scroll  = require('react-scroll');\r\nvar Helpers = Scroll.Helpers;\r\n\r\nvar Element = React.createClass({\r\n  render: function () {\r\n    return (\r\n      <div {...this.props}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n});\r\n\r\nmodule.exports = Helpers.Element(Element);\r\n\r\nvar Link = React.createClass({\r\n  render: function () {\r\n    return (\r\n      <a {...this.props}>\r\n        {this.props.children}\r\n      </a>\r\n    );\r\n  }\r\n});\r\n\r\nmodule.exports = Helpers.Scroll(Link);\r\n\r\n```\r\n\r\n\r\n### Scroll Animations\r\n> Add a custom easing animation to the smooth option. This prop will accept a Boolean if you want the default, or any of the animations listed below\r\n\r\n```js\r\n\r\nscroller.scrollTo('myScrollToElement', {\r\n  duration: 1500,\r\n  delay: 100,\r\n  smooth: \"easeInOutQuint\",\r\n  containerId: 'ContainerElementID',\r\n  ...\r\n})\r\n\r\n```\r\n\r\n> List of currently available animations:\r\n\r\n```\r\nlinear\r\n\t- no easing, no acceleration.\r\neaseInQuad\r\n\t- accelerating from zero velocity.\r\neaseOutQuad\r\n\t- decelerating to zero velocity.\r\neaseInOutQuad\r\n\t- acceleration until halfway, then deceleration.\r\neaseInCubic\r\n\t- accelerating from zero velocity.\r\neaseOutCubic\r\n\t- decelerating to zero velocity.\r\neaseInOutCubic\r\n\t- acceleration until halfway, then deceleration.\r\neaseInQuart\r\n\t- accelerating from zero velocity.\r\neaseOutQuart\r\n\t- decelerating to zero velocity.\r\neaseInOutQuart\r\n\t-  acceleration until halfway, then deceleration.\r\neaseInQuint\r\n\t- accelerating from zero velocity.\r\neaseOutQuint\r\n\t- decelerating to zero velocity.\r\neaseInOutQuint\r\n\t- acceleration until halfway, then deceleration.\r\n```\r\n\r\nA good visual reference can be found at [easings.net](http://easings.net/)\r\n\r\n\r\n#### Changelog\r\n> v1.4.0\r\n- It's now possible to nest scroll areas and get a callback when \"link is active\"\r\n\r\n> v1.3.0\r\n- Remove directlink, now just use Link.\r\n\r\n> v1.2.0\r\n- Now using passive event listeners.\r\n\r\n> v1.1.0\r\n- now possible to set initial active link on componentDidMount ( see README or examples code )\r\n- removed unnecessary events for scroll.\r\n\r\n> v1.0.24\r\n- you can now pass any native property to Link/Element\r\n- patched minor bugs from v1.0.21 > v1.0.24\r\n\r\n> v1.0.21\r\n- scrollToBottom and scrollMore now works inside a container.\r\n\r\n> v1.0.20\r\n- Published, somehow the publish failed\r\n\r\n> v1.0.19\r\n- Property warnings has now been removed.\r\n\r\n> v1.0.18\r\n- It's now possible to scroll within a container, checkout the code under examples.\r\n\r\n> v1.0.17\r\n- isDynamic property has been added. To allow scrollSpy to recalculate components that expand\r\n\r\n#### Things that needs to be done - feel free to contribute.\r\n- Being able to use react-scroll within a div.\r\n- Integrate react-scroll with react-router\r\n- Hash-scrolling.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fisshy/react-scroll.git"
  },
  "scripts": {
    "build": "babel modules -d build/npm/modules --ignore '**/__tests__/**' && gulp",
    "clean": "rm -rf build/npm/modules",
    "examples": "webpack-dev-server --config examples/webpack.config.js --no-info --content-base examples",
    "test": "karma start"
  },
  "tags": [
    "react",
    "scroll"
  ],
  "version": "1.5.2"
}
